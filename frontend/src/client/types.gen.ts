// This file is auto-generated by @hey-api/openapi-ts

export type AudioResponse = {
    message: string;
    audio_data?: ((Blob | File) | null);
};

export type Body_generate_audio_response = {
    text: string;
    voice?: string;
};

export type Body_transcribe_audio = {
    audio_file: (Blob | File);
};

export type Body_upload_audio = {
    audio_file: (Blob | File);
};

export type CaseCreate = {
    name: string;
    summary?: (string | null);
    party_a?: (string | null);
    party_b?: (string | null);
    context?: (string | null);
};

export type CaseUpdate = {
    party_a?: (string | null);
    party_b?: (string | null);
    key_issues?: (string | null);
    general_notes?: (string | null);
};

export type CaseWithTreeCount = {
    id: number;
    name: string;
    party_a: string;
    party_b: string;
    context: string;
    summary: string;
    last_modified: string;
    scenario_count: number;
};

export type ContextResponse = {
    context: string;
};

export type ContinueConversationRequest = {
    case_id: number;
    tree_id?: (number | null);
    simulation_goal?: string;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type Message = {
    id?: number;
    content?: string;
    role?: string;
    selected?: boolean;
    simulation_id: number;
    parent_id: number;
};

export type ModelRequest = {
    question: string;
};

export type TreeNode = {
    speaker: string;
    line: string;
    level: number;
    reflects_personality: string;
    responses?: Array<TreeNode>;
};

export type TreeResponse = {
    tree_id?: (number | null);
    case_id: number;
    simulation_goal: string;
    scenarios_tree: TreeNode;
    error?: (string | null);
    raw_response?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type GetContextHistoryData = {
    caseId: number;
    treeId: number;
};

export type GetContextHistoryResponse = (ContextResponse);

export type TranscribeAudioData = {
    formData: Body_transcribe_audio;
};

export type TranscribeAudioResponse = (unknown);

export type SummarizeDialogueData = {
    data: string;
    desiredLength: number;
};

export type SummarizeDialogueResponse = (unknown);

export type SummarizeBackgroundData = {
    data: string;
    desiredLines: number;
};

export type SummarizeBackgroundResponse = (unknown);

export type GetConversationAudioData = {
    treeId: number;
};

export type GetConversationAudioResponse = (unknown);

export type ContinueConversationData = {
    requestBody: ContinueConversationRequest;
};

export type ContinueConversationResponse = (TreeResponse);

export type GetTreeMessagesEndpointData = {
    simulationId: number;
};

export type GetTreeMessagesEndpointResponse = (Array<{
    [key: string]: unknown;
}>);

export type GetSelectedMessagesPathData = {
    /**
     * Ending message ID
     */
    endId: number;
    /**
     * Starting message ID
     */
    startId: number;
};

export type GetSelectedMessagesPathResponse = (Array<{
    [key: string]: unknown;
}>);

export type TrimMessagesAfterChildrenData = {
    messageId: number;
};

export type TrimMessagesAfterChildrenResponse = (unknown);

export type GetChildrenData = {
    messageId: number;
};

export type GetChildrenResponse = (Array<Message>);

export type SelectMessageData = {
    messageId: number;
};

export type SelectMessageResponse = (Message);

export type CreateMessageData = {
    content: string;
    parentId: (number | null);
    role: string;
    treeId: number;
};

export type CreateMessageResponse = (Message);

export type GetAllCasesResponse = (Array<CaseWithTreeCount>);

export type CreateCaseData = {
    requestBody: CaseCreate;
};

export type CreateCaseResponse = (CaseWithTreeCount);

export type GetCaseWithSimulationsData = {
    caseId: number;
};

export type GetCaseWithSimulationsResponse = (unknown);

export type UpdateCaseData = {
    caseId: number;
    requestBody: CaseUpdate;
};

export type UpdateCaseResponse = (unknown);

export type GetContextHistory1Response = (ContextResponse);

export type UploadAudioData = {
    formData: Body_upload_audio;
};

export type UploadAudioResponse = (unknown);

export type ProcessWithModelData = {
    requestBody: ModelRequest;
};

export type ProcessWithModelResponse = (AudioResponse);

export type GetAvailableModelsResponse = (unknown);

export type GenerateAudioResponseData = {
    formData: Body_generate_audio_response;
};

export type GenerateAudioResponseResponse = (unknown);