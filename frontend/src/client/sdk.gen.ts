// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetContextHistoryData, GetContextHistoryResponse, TranscribeAudioData, TranscribeAudioResponse, SummarizeDialogueData, SummarizeDialogueResponse, SummarizeBackgroundData, SummarizeBackgroundResponse, GetConversationAudioData, GetConversationAudioResponse, ContinueConversationData, ContinueConversationResponse, GetTreeMessagesEndpointData, GetTreeMessagesEndpointResponse, GetSelectedMessagesPathData, GetSelectedMessagesPathResponse, TrimMessagesAfterChildrenData, TrimMessagesAfterChildrenResponse, GetChildrenData, GetChildrenResponse, SelectMessageData, SelectMessageResponse, CreateMessageData, CreateMessageResponse, CreateSummarizedMessageData, CreateSummarizedMessageResponse, GetAllCasesResponse, CreateCaseData, CreateCaseResponse, GetCaseWithSimulationsData, GetCaseWithSimulationsResponse, DeleteCaseData, DeleteCaseResponse, UpdateCaseData, UpdateCaseResponse, CreateSimulationEndpointData, CreateSimulationEndpointResponse, GetSimulationEndpointData, GetSimulationEndpointResponse, DeleteSimulationData, DeleteSimulationResponse, CreateBookmarkEndpointData, CreateBookmarkEndpointResponse, GetBookmarksBySimulationEndpointData, GetBookmarksBySimulationEndpointResponse, DeleteBookmarkEndpointData, DeleteBookmarkEndpointResponse, GetMessagesByTreeEndpointData, GetMessagesByTreeEndpointResponse, GetDummyContextHistoryResponse, UploadAudioData, UploadAudioResponse, ProcessWithModelData, ProcessWithModelResponse, GetAvailableModelsResponse, GenerateAudioResponseData, GenerateAudioResponseResponse, UtilsHealthCheckResponse } from './types.gen';

export class DefaultService {
    /**
     * Get Context History
     * Get the current context history for the legal case.
     * For now, returns a pregenerated string.
     * @param data The data for the request.
     * @param data.caseId
     * @param data.treeId
     * @returns ContextResponse Successful Response
     * @throws ApiError
     */
    public static getContextHistory(data: GetContextHistoryData): CancelablePromise<GetContextHistoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/context/{case_id}/{tree_id}',
            path: {
                case_id: data.caseId,
                tree_id: data.treeId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Transcribe Audio
     * Upload .wav audio file containing user's voice question.
     * Returns the transcribed text from the audio.
     * @param data The data for the request.
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static transcribeAudio(data: TranscribeAudioData): CancelablePromise<TranscribeAudioResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/transcribe-audio',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Summarize Dialogue
     * Takes in a string describing what you want summarized, the desired length to summarize it to.
     * Returns a shortened summary about desired_length words long, as if a lawyer said it.
     * @param data The data for the request.
     * @param data.data
     * @param data.desiredLength
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static summarizeDialogue(data: SummarizeDialogueData): CancelablePromise<SummarizeDialogueResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/summarize-dialogue',
            query: {
                data: data.data,
                desired_length: data.desiredLength
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Summarize Background
     * API endpoint to summarize text.
     * Takes in a string describing what you want summarized, the desired lines to summarize it to.
     * Returns a shortened summary about desired_lines number of lines long.
     * @param data The data for the request.
     * @param data.data
     * @param data.desiredLines
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static summarizeBackground(data: SummarizeBackgroundData): CancelablePromise<SummarizeBackgroundResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/summarize-background',
            query: {
                data: data.data,
                desired_lines: data.desiredLines
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Conversation Audio
     * Takes a tree_id, for which it gets conversation history messages from the database in order.
     * Returns the generated audio file as wav.
     * @param data The data for the request.
     * @param data.treeId
     * @param data.endMessageId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getConversationAudio(data: GetConversationAudioData): CancelablePromise<GetConversationAudioResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/get-conversation-audio/{tree_id}',
            path: {
                tree_id: data.treeId
            },
            query: {
                end_message_id: data.endMessageId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Continue Conversation
     * Continue a conversation by either generating new messages or returning existing children.
     * If tree_id is provided:
     * - If the last selected message is a leaf node, generates new messages and saves them.
     * - If not a leaf node, returns the existing children of the last selected message.
     * If no tree_id is provided, assumes no prior history and creates a new tree.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static continueConversation(data: ContinueConversationData): CancelablePromise<ContinueConversationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/continue-conversation',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Tree Messages Endpoint
     * Return all messages for a specific simulation_id (both selected and unselected)
     * in a hierarchical chronological structure.
     * @param data The data for the request.
     * @param data.simulationId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getTreeMessagesEndpoint(data: GetTreeMessagesEndpointData): CancelablePromise<GetTreeMessagesEndpointResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/trees/{simulation_id}/messages',
            path: {
                simulation_id: data.simulationId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Selected Messages Path
     * Return all selected messages between start_id and end_id (inclusive),
     * in chronological order.
     * @param data The data for the request.
     * @param data.startId Starting message ID
     * @param data.endId Ending message ID
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getSelectedMessagesPath(data: GetSelectedMessagesPathData): CancelablePromise<GetSelectedMessagesPathResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/messages/selected-path',
            query: {
                start_id: data.startId,
                end_id: data.endId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Trim Messages After Children
     * Delete all messages after the children of the given message.
     * Keeps the given message and its direct children.
     * @param data The data for the request.
     * @param data.messageId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static trimMessagesAfterChildren(data: TrimMessagesAfterChildrenData): CancelablePromise<TrimMessagesAfterChildrenResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/messages/trim-after/{message_id}',
            path: {
                message_id: data.messageId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Children
     * Get all direct children of a message.
     * @param data The data for the request.
     * @param data.messageId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static getChildren(data: GetChildrenData): CancelablePromise<GetChildrenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/messages/{message_id}/children',
            path: {
                message_id: data.messageId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Select Message
     * Mark a message as selected=True.
     * @param data The data for the request.
     * @param data.messageId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static selectMessage(data: SelectMessageData): CancelablePromise<SelectMessageResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/messages/{message_id}/select',
            path: {
                message_id: data.messageId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Message
     * Create a new message in the conversation tree.
     * Used for custom user responses that aren't from the predefined options.
     * @param data The data for the request.
     * @param data.simulationId
     * @param data.parentId
     * @param data.content
     * @param data.role
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static createMessage(data: CreateMessageData): CancelablePromise<CreateMessageResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/messages/create',
            query: {
                simulation_id: data.simulationId,
                parent_id: data.parentId,
                content: data.content,
                role: data.role
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Summarized Message
     * Create a new message with content summarized from user input using AI.
     * Summarizes the user_input and creates a Message object with the summarized content.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static createSummarizedMessage(data: CreateSummarizedMessageData): CancelablePromise<CreateSummarizedMessageResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/messages/create-summarized',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get All Cases
     * Return all cases with the number of trees for each case.
     * @returns CaseWithTreeCount Successful Response
     * @throws ApiError
     */
    public static getAllCases(): CancelablePromise<GetAllCasesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/cases'
        });
    }
    
    /**
     * Create Case
     * Create a new case with the provided information.
     * Returns the created case with scenario count initialized to 0.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns CaseWithTreeCount Successful Response
     * @throws ApiError
     */
    public static createCase(data: CreateCaseData): CancelablePromise<CreateCaseResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/cases',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Case With Simulations
     * Get one case by ID, including its background and all simulations.
     * Returns data matching the CaseData interface for the frontend.
     * @param data The data for the request.
     * @param data.caseId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getCaseWithSimulations(data: GetCaseWithSimulationsData): CancelablePromise<GetCaseWithSimulationsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/cases/{case_id}',
            path: {
                case_id: data.caseId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Case
     * Delete a case by ID.
     * All related simulations, documents, messages, and bookmarks will be automatically deleted
     * via CASCADE constraints.
     * @param data The data for the request.
     * @param data.caseId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteCase(data: DeleteCaseData): CancelablePromise<DeleteCaseResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/cases/{case_id}',
            path: {
                case_id: data.caseId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Case
     * Update a case's background information.
     * Updates the context field which is stored as JSON.
     * Also regenerates the summary based on the updated context.
     * @param data The data for the request.
     * @param data.caseId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static updateCase(data: UpdateCaseData): CancelablePromise<UpdateCaseResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/cases/{case_id}',
            path: {
                case_id: data.caseId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Simulation Endpoint
     * Create a new simulation with headline, brief, and case_id.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SimulationResponse Successful Response
     * @throws ApiError
     */
    public static createSimulationEndpoint(data: CreateSimulationEndpointData): CancelablePromise<CreateSimulationEndpointResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/simulations',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Simulation Endpoint
     * Get simulation details by ID, including headline (title), brief, created_at, and case_id.
     * @param data The data for the request.
     * @param data.simulationId
     * @returns SimulationResponse Successful Response
     * @throws ApiError
     */
    public static getSimulationEndpoint(data: GetSimulationEndpointData): CancelablePromise<GetSimulationEndpointResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/simulations/{simulation_id}',
            path: {
                simulation_id: data.simulationId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Simulation
     * Delete a simulation by ID.
     * All related messages and bookmarks will be automatically deleted via CASCADE constraints.
     * @param data The data for the request.
     * @param data.simulationId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteSimulation(data: DeleteSimulationData): CancelablePromise<DeleteSimulationResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/simulations/{simulation_id}',
            path: {
                simulation_id: data.simulationId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Bookmark Endpoint
     * Create a new bookmark for a specific message in a simulation.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns BookmarkResponse Successful Response
     * @throws ApiError
     */
    public static createBookmarkEndpoint(data: CreateBookmarkEndpointData): CancelablePromise<CreateBookmarkEndpointResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/bookmarks',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Bookmarks By Simulation Endpoint
     * Get all bookmarks for a specific simulation.
     * @param data The data for the request.
     * @param data.simulationId
     * @returns BookmarkResponse Successful Response
     * @throws ApiError
     */
    public static getBookmarksBySimulationEndpoint(data: GetBookmarksBySimulationEndpointData): CancelablePromise<GetBookmarksBySimulationEndpointResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/bookmarks/{simulation_id}',
            path: {
                simulation_id: data.simulationId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Bookmark Endpoint
     * Delete a bookmark by ID.
     * @param data The data for the request.
     * @param data.bookmarkId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteBookmarkEndpoint(data: DeleteBookmarkEndpointData): CancelablePromise<DeleteBookmarkEndpointResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/bookmarks/{bookmark_id}',
            path: {
                bookmark_id: data.bookmarkId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Messages By Tree Endpoint
     * @param data The data for the request.
     * @param data.simulationId
     * @param data.messageId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getMessagesByTreeEndpoint(data: GetMessagesByTreeEndpointData): CancelablePromise<GetMessagesByTreeEndpointResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/trees/{simulation_id}/messages/traversal',
            path: {
                simulation_id: data.simulationId
            },
            query: {
                message_id: data.messageId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Dummy Context History
     * Get the current context history for the legal case.
     * For now, returns a pregenerated string.
     * @returns ContextResponse Successful Response
     * @throws ApiError
     */
    public static getDummyContextHistory(): CancelablePromise<GetDummyContextHistoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/dummy_context'
        });
    }
    
    /**
     * Upload Audio
     * Upload audio file containing user's voice question.
     * Returns the transcribed text from the audio.
     * @param data The data for the request.
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static uploadAudio(data: UploadAudioData): CancelablePromise<UploadAudioResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/upload-audio',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Process With Model
     * Process a question using one of the available AI models.
     * Can optionally include context history.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AudioResponse Successful Response
     * @throws ApiError
     */
    public static processWithModel(data: ProcessWithModelData): CancelablePromise<ProcessWithModelResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/process-with-model',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Available Models
     * Get list of available AI models.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getAvailableModels(): CancelablePromise<GetAvailableModelsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/models'
        });
    }
    
    /**
     * Generate Audio Response
     * Generate audio response from text using the audio generation model.
     * @param data The data for the request.
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static generateAudioResponse(data: GenerateAudioResponseData): CancelablePromise<GenerateAudioResponseResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/generate-audio-response',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class UtilsService {
    /**
     * Health Check
     * Health check endpoint for monitoring and load balancers.
     * Returns a simple OK status to indicate the service is running.
     * @returns string Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check'
        });
    }
}