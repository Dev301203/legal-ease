// This file is auto-generated by @hey-api/openapi-ts

export const AudioResponseSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        },
        audio_data: {
            anyOf: [
                {
                    type: 'string',
                    format: 'binary'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Audio Data'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'AudioResponse'
} as const;

export const Body_generate_audio_responseSchema = {
    properties: {
        text: {
            type: 'string',
            title: 'Text'
        },
        voice: {
            type: 'string',
            title: 'Voice',
            default: 'belinda'
        }
    },
    type: 'object',
    required: ['text'],
    title: 'Body_generate_audio_response'
} as const;

export const Body_transcribe_audioSchema = {
    properties: {
        audio_file: {
            type: 'string',
            format: 'binary',
            title: 'Audio File'
        }
    },
    type: 'object',
    required: ['audio_file'],
    title: 'Body_transcribe_audio'
} as const;

export const Body_upload_audioSchema = {
    properties: {
        audio_file: {
            type: 'string',
            format: 'binary',
            title: 'Audio File'
        }
    },
    type: 'object',
    required: ['audio_file'],
    title: 'Body_upload_audio'
} as const;

export const CaseCreateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        summary: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Summary'
        },
        party_a: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Party A'
        },
        party_b: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Party B'
        },
        context: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Context'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'CaseCreate'
} as const;

export const CaseUpdateSchema = {
    properties: {
        party_a: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Party A'
        },
        party_b: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Party B'
        },
        key_issues: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Key Issues'
        },
        general_notes: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'General Notes'
        }
    },
    type: 'object',
    title: 'CaseUpdate'
} as const;

export const CaseWithTreeCountSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        party_a: {
            type: 'string',
            title: 'Party A'
        },
        party_b: {
            type: 'string',
            title: 'Party B'
        },
        context: {
            type: 'string',
            title: 'Context'
        },
        summary: {
            type: 'string',
            title: 'Summary'
        },
        last_modified: {
            type: 'string',
            format: 'date-time',
            title: 'Last Modified'
        },
        scenario_count: {
            type: 'integer',
            title: 'Scenario Count'
        }
    },
    type: 'object',
    required: ['id', 'name', 'party_a', 'party_b', 'context', 'summary', 'last_modified', 'scenario_count'],
    title: 'CaseWithTreeCount'
} as const;

export const ContextResponseSchema = {
    properties: {
        context: {
            type: 'string',
            title: 'Context'
        }
    },
    type: 'object',
    required: ['context'],
    title: 'ContextResponse'
} as const;

export const ContinueConversationRequestSchema = {
    properties: {
        case_id: {
            type: 'integer',
            title: 'Case Id'
        },
        tree_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tree Id'
        },
        simulation_goal: {
            type: 'string',
            title: 'Simulation Goal',
            default: 'Reach a favorable settlement'
        }
    },
    type: 'object',
    required: ['case_id'],
    title: 'ContinueConversationRequest'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const MessageSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        content: {
            type: 'string',
            title: 'Content'
        },
        role: {
            type: 'string',
            title: 'Role'
        },
        selected: {
            type: 'boolean',
            title: 'Selected',
            default: false
        },
        simulation_id: {
            type: 'integer',
            title: 'Simulation Id'
        },
        parent_id: {
            type: 'integer',
            title: 'Parent Id'
        }
    },
    type: 'object',
    required: ['simulation_id', 'parent_id'],
    title: 'Message'
} as const;

export const ModelRequestSchema = {
    properties: {
        question: {
            type: 'string',
            title: 'Question'
        }
    },
    type: 'object',
    required: ['question'],
    title: 'ModelRequest'
} as const;

export const TreeNodeSchema = {
    properties: {
        speaker: {
            type: 'string',
            title: 'Speaker'
        },
        line: {
            type: 'string',
            title: 'Line'
        },
        level: {
            type: 'integer',
            title: 'Level'
        },
        reflects_personality: {
            type: 'string',
            title: 'Reflects Personality'
        },
        responses: {
            items: {
                '$ref': '#/components/schemas/TreeNode'
            },
            type: 'array',
            title: 'Responses',
            default: []
        }
    },
    type: 'object',
    required: ['speaker', 'line', 'level', 'reflects_personality'],
    title: 'TreeNode'
} as const;

export const TreeResponseSchema = {
    properties: {
        tree_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tree Id'
        },
        case_id: {
            type: 'integer',
            title: 'Case Id'
        },
        simulation_goal: {
            type: 'string',
            title: 'Simulation Goal'
        },
        scenarios_tree: {
            '$ref': '#/components/schemas/TreeNode'
        },
        error: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Error'
        },
        raw_response: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Raw Response'
        }
    },
    type: 'object',
    required: ['case_id', 'simulation_goal', 'scenarios_tree'],
    title: 'TreeResponse'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;